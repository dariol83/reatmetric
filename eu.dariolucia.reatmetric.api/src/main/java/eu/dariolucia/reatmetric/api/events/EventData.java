/*
 * Copyright (c)  2020 Dario Lucia (https://www.dariolucia.eu)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package eu.dariolucia.reatmetric.api.events;

import eu.dariolucia.reatmetric.api.common.AbstractDataItem;
import eu.dariolucia.reatmetric.api.common.IUniqueId;
import eu.dariolucia.reatmetric.api.messages.Severity;
import eu.dariolucia.reatmetric.api.model.SystemEntityPath;
import eu.dariolucia.reatmetric.api.processing.input.EventOccurrence;

import java.io.Serializable;
import java.time.Instant;

/**
 * An instance of this class represents the occurrence of an event at a given point in time. Instances of this class
 * are generated by the processing model when:
 * <ul>
 *     <li>an event condition is evaluated to be triggered</li>
 *     <li>an event is externally injected into the processing model via the {@link eu.dariolucia.reatmetric.api.processing.IProcessingModel#raiseEvent(EventOccurrence)} operation</li>
 *     <li>an event is triggered by a specified criterium in a parameter definition (e.g. on new value)</li>
 * </ul>
 *
 * Objects of this class are immutable.
 */
public final class EventData extends AbstractDataItem implements Serializable {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private final int externalId;

	private final String name;

    private final SystemEntityPath path;
    
    private final String qualifier;
    
    private final Instant receptionTime;

    private final String type;
    
    private final String route;

    private final String source;
    
    private final Severity severity;

    private final Object report;

    private final IUniqueId rawDataContainerId;

	/**
	 * Constructor of the class.
	 *
	 * @param internalId the internal ID identifying the event occurrence
	 * @param generationTime the generation time of the event
	 * @param externalId the event ID as specified in the processing model definition
	 * @param name the name of the event
	 * @param path the path of the event in the processing model tree
	 * @param qualifier the event qualifier, i.e. a runtime string characterizing the event occurrence, can be null
	 * @param type the event type as specified in the processing model definition
	 * @param route the reception route of the event, can be null
	 * @param source the event source, can be null
	 * @param severity the severity of the event as specified in the processing model definition
	 * @param report the event report, i.e. an opaque object linked to the event occurrence, can be null
	 * @param rawDataContainerId the unique ID of the {@link eu.dariolucia.reatmetric.api.rawdata.RawData} delivering the event, can be null
	 * @param receptionTime the time when the event is considered "received"
	 * @param extension an extension object, can be null
	 */
	public EventData(IUniqueId internalId, Instant generationTime, int externalId, String name,
                     SystemEntityPath path, String qualifier, String type, String route, String source, Severity severity, Object report, IUniqueId rawDataContainerId, Instant receptionTime,
					 Object extension) {
		super(internalId, generationTime, extension);
		this.externalId = externalId;
		this.name = name;
		this.path = path;
		this.qualifier = qualifier;
		this.receptionTime = receptionTime;
		this.type = type;
		this.route = route;
		this.source = source;
		this.severity = severity;
		this.report = report;
		this.rawDataContainerId = rawDataContainerId;
	}

	/**
	 * Return the event ID as specified in the processing model definition.
	 *
	 * @return the external ID
	 */
    public int getExternalId() {
        return externalId;
    }

	/**
	 * Return the event name.
	 *
	 * @return the event name
	 */
	public String getName() {
		return name;
	}

	/**
	 * Return the event path.
	 *
	 * @return the event path
	 */
	public SystemEntityPath getPath() {
		return path;
	}

	/**
	 * Return the event qualifier, which is a string provided at event injection time. It can be used to deliver further
	 * information about the nature and characteristics of the event occurrence.
	 *
	 * It can be null
	 *
	 * @return the event qualifier, or null if not specified
	 */
	public String getQualifier() {
		return qualifier;
	}

	/**
	 * Return the reception time of the event. The reception time is the time when the event occurrence became visible to
	 * the system. This concept can have different meanings, depending on the system implementation. For instance, in a system
	 * with a remote detection agent, this time can actually be the time of the detection of the event occurrence by this remote agent,
	 * and not the time the event occurrence reached the ReatMetric system for processing.
	 *
	 * @return the reception time
	 */
	public Instant getReceptionTime() {
		return receptionTime;
	}

	/**
	 * Return the type of the event as defined in the processing model.
	 *
	 * @return the event type
	 */
	public String getType() {
		return type;
	}

	/**
	 * Return the route of the event, i.e. the data flow that delivered the event to the ReatMetric system.
	 * It can be null if not specified.
	 *
	 * @return the event route, or null if not specified
	 */
	public String getRoute() {
		return route;
	}

	/**
	 * Return the source of the event occurrence.
	 * It can be null if not specified.
	 *
	 * @return the event source, or null if not specified
	 */
	public String getSource() {
		return source;
	}

	/**
	 * Return the severity of the event as defined in the processing model.
	 *
	 * @return the event severity
	 */
	public Severity getSeverity() {
		return severity;
	}

	/**
	 * Return the unique ID of the {@link eu.dariolucia.reatmetric.api.rawdata.RawData} delivering the event to the
	 * ReatMetric system. This is typically the ID of a protocol data unit stored as {@link eu.dariolucia.reatmetric.api.rawdata.RawData}
	 * object.
	 * It can be null if not available.
	 *
	 * @return the {@link IUniqueId} of the {@link eu.dariolucia.reatmetric.api.rawdata.RawData} related to the event occurrence, or null if not specified
	 */
    public IUniqueId getRawDataContainerId() {
        return rawDataContainerId;
    }

	/**
	 * Return the report object attached to this event occurrence.
	 * It can be null if not available.
	 *
	 * @return the report object
	 */
	public Object getReport() {
        return report;
    }

    @Override
    public String toString() {
        return "EventData{" +
				"internalId=" + internalId +
				", generationTime=" + generationTime +
                ", externalId=" + externalId +
                ", name='" + name + '\'' +
                ", path=" + path +
                ", qualifier='" + qualifier + '\'' +
                ", receptionTime=" + receptionTime +
                ", type='" + type + '\'' +
                ", route='" + route + '\'' +
                ", source='" + source + '\'' +
                ", report=" + report +
                ", containerId=" + rawDataContainerId +
                ", severity=" + severity +
                '}';
    }
}
