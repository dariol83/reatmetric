<!--
  ~ Copyright (c) 2019.  Dario Lucia (dario.lucia@gmail.com)
  ~ All rights reserved.
  ~
  ~ Right to reproduce, use, modify and distribute (in whole or in part) this library for demonstrations/trainings/study/commercial purposes shall be granted by the author in writing.
  -->

<ns1:processing xmlns:ns1="http://dariolucia.eu/reatmetric/processing/definition">
    <parameters>
        <!-- All types-->
        <parameter id="#101" location="ROOT.ELEMENT1.PARAM1" description="Parameter 1" raw_type="BOOLEAN" eng_type="BOOLEAN" eng_unit="" />
        <parameter id="#102" location="ROOT.ELEMENT1.PARAM2" description="Parameter 2" raw_type="ENUMERATED" eng_type="ENUMERATED" eng_unit="" />
        <parameter id="#103" location="ROOT.ELEMENT1.PARAM3" description="Parameter 3" raw_type="UNSIGNED_INTEGER" eng_type="UNSIGNED_INTEGER" eng_unit="" />
        <parameter id="#104" location="ROOT.ELEMENT1.PARAM4" description="Parameter 4" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="" />
        <parameter id="#105" location="ROOT.ELEMENT1.PARAM5" description="Parameter 5" raw_type="REAL" eng_type="REAL" eng_unit="" />
        <parameter id="#106" location="ROOT.ELEMENT2.PARAM1" description="Parameter 6" raw_type="BIT_STRING" eng_type="BIT_STRING" eng_unit="" />
        <parameter id="#107" location="ROOT.ELEMENT2.PARAM2" description="Parameter 7" raw_type="OCTET_STRING" eng_type="OCTET_STRING" eng_unit="" />
        <parameter id="#108" location="ROOT.ELEMENT2.PARAM3" description="Parameter 8" raw_type="CHARACTER_STRING" eng_type="CHARACTER_STRING" eng_unit="" />
        <parameter id="#109" location="ROOT.ELEMENT2.PARAM4" description="Parameter 9" raw_type="ABSOLUTE_TIME" eng_type="ABSOLUTE_TIME" eng_unit="" />
        <parameter id="#110" location="ROOT.ELEMENT2.PARAM5" description="Parameter 10" raw_type="RELATIVE_TIME" eng_type="RELATIVE_TIME" eng_unit="" />

        <!-- Battery model -->
        <parameter id="#1001" location="ROOT.BATTERY.BATTERY_STATE" description="Battery state" raw_type="BOOLEAN" eng_type="BOOLEAN" eng_unit="">
            <validity>
                <condition><expression>true</expression></condition>
            </validity>
            <checks>
                <expected name="EXPCHK1" type="BOOLEAN">
                    <value>true</value>
                </expected>
            </checks>
        </parameter>
        <parameter id="#1002" location="ROOT.BATTERY.BATTERY_TENSION" description="Battery tension" raw_type="UNSIGNED_INTEGER" eng_type="UNSIGNED_INTEGER" eng_unit="mV">
            <validity>
                <condition>
                    <expression>BATTERY_STATE.value() == true</expression>
                    <symbol name="BATTERY_STATE" reference="#1001" />
                </condition>
            </validity>
            <calib_poly a0="10" a1="2" />
            <checks>
                <limit name="BTENSLIMIT" type="UNSIGNED_INTEGER" severity="WARNING" high="3000" low="1000"/>
            </checks>
        </parameter>
        <parameter id="#1003" location="ROOT.BATTERY.BATTERY_CURRENT" description="Battery current" raw_type="UNSIGNED_INTEGER" eng_type="REAL" eng_unit="A">
            <validity>
                <condition>
                    <expression>BATTERY_STATE.value() == true &amp;&amp; !BATTERY_TENSION.inAlarm()</expression>
                    <symbol name="BATTERY_STATE" reference="#1001" />
                    <symbol name="BATTERY_TENSION" reference="#1002" />
                </condition>
            </validity>
            <calib_expression>
                <definition>
                    <expression>input + BATTERY_TENSION.value()/300.0</expression>
                    <symbol name="BATTERY_TENSION" reference="#1002" /><!-- input is added automatically (source value) -->
                </definition>
            </calib_expression>
            <checks>
                <limit name="BCURRLIMIT" type="REAL" severity="ALARM" high="3.8" low="0.5"/>
                <delta name="BCURRDELTA" type="REAL" severity="ALARM" numViolations="2" high="0.2" low="-0.2"/>
            </checks>
        </parameter>
        <parameter id="#1004" location="ROOT.BATTERY.BATTERY_STATE_EN" description="Battery state as enum" raw_type="ENUMERATED" eng_type="CHARACTER_STRING">
            <synthetic>
                <expression>BATTERY_STATE.value() ? 1 : 0</expression>
                <symbol name="BATTERY_STATE" reference="#1001" />
            </synthetic>
            <calib_enum default="UNKNOWN">
                <point x="0" y="OFF" />
                <point x="1" y="ON" />
            </calib_enum>
            <checks>
                <expected name="EXPCHK1" type="CHARACTER_STRING">
                    <value>ON</value>
                </expected>
            </checks>
        </parameter>

        <!-- Fail model, to test errors -->
        <parameter id="#1010" location="ROOT.FAIL.WRONG_VAL_RETVAL" description="Wrong validity return value" raw_type="ENUMERATED" eng_type="CHARACTER_STRING">
            <validity>
                <condition>
                <expression>12.3</expression>
                </condition>
            </validity>
            <calib_enum default="UNKNOWN">
                <point x="0" y="OFF" />
                <point x="1" y="ON" />
            </calib_enum>
        </parameter>
        <parameter id="#1011" location="ROOT.FAIL.DEPEN" description="Dependency for synth parameter" raw_type="REAL" eng_type="REAL">
        </parameter>
        <parameter id="#1012" location="ROOT.FAIL.SYNTH_SAMPLE" description="Synthetic value" raw_type="REAL" eng_type="REAL" eng_unit="mS">
            <synthetic>
                <expression>DEPEN.value() * 2</expression>
                <symbol name="DEPEN" reference="#1011" />
            </synthetic>
        </parameter>
        <parameter id="#1013" location="ROOT.FAIL.WRONG_VAL_EXP" description="Wrong validity expression" raw_type="ENUMERATED" eng_type="CHARACTER_STRING">
            <validity>
                <condition>
                    <expression>NOSYMBOL == 2.0</expression>
                </condition>
            </validity>
            <calib_enum default="UNKNOWN">
                <point x="0" y="OFF" />
                <point x="1" y="ON" />
            </calib_enum>
        </parameter>
        <parameter id="#1014" location="ROOT.FAIL.WRONG_SYNTH_EXP" description="Wrong synthetic value expression" raw_type="REAL" eng_type="REAL" eng_unit="mS">
            <synthetic>
                <expression>WHATEVER * 2</expression>
                <symbol name="DEPEN" reference="#1011" />
            </synthetic>
        </parameter>

        <!-- Validity matchers with base value -->
        <parameter id="#1020" location="ROOT.VALTEST.BASE" description="Base parameter" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="">
            <checks>
                <expected name="EXPCHK1" type="SIGNED_INTEGER">
                    <value>10</value>
                    <value>20</value>
                    <value>30</value>
                </expected>
            </checks>
        </parameter>
        <parameter id="#1021" location="ROOT.VALTEST.VALMATCH1" description="Parameter with matcher 1" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="">
            <validity>
                <match parameter="#1020" operator="EQUAL" valueType="SIGNED_INTEGER" value="20" />
            </validity>
        </parameter>
        <parameter id="#1022" location="ROOT.VALTEST.VALMATCH2" description="Parameter with matcher 2" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="">
            <validity>
                <match parameter="#1020" operator="GT" valueType="SIGNED_INTEGER" value="20" />
            </validity>
        </parameter>
        <parameter id="#1023" location="ROOT.VALTEST.VALMATCH3" description="Parameter with matcher 3" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="">
            <validity>
                <match parameter="#1020" operator="LT" valueType="SIGNED_INTEGER" value="20" />
            </validity>
        </parameter>
        <parameter id="#1024" location="ROOT.VALTEST.VALMATCH4" description="Parameter with matcher 4" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="">
            <validity>
                <match parameter="#1020" operator="NOT_EQUAL" valueType="SIGNED_INTEGER" value="30" />
            </validity>
        </parameter>

        <!-- Validity matchers with parameter reference -->
        <parameter id="#1025" location="ROOT.VALTEST.BASE2" description="Base parameter 2" raw_type="ABSOLUTE_TIME"
                   eng_type="ABSOLUTE_TIME" eng_unit=""/>
        <parameter id="#1026" location="ROOT.VALTEST.BASE3" description="Base parameter 3" raw_type="ABSOLUTE_TIME"
                   eng_type="ABSOLUTE_TIME" eng_unit=""/>
        <parameter id="#1027" location="ROOT.VALTEST.VALMATCH5" description="Parameter with matcher 5" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="">
            <validity>
                <match parameter="#1025" operator="LT" reference="#1026" />
            </validity>
        </parameter>
        <parameter id="#1028" location="ROOT.VALTEST.VALMATCH6" description="Parameter with matcher 6" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="">
            <validity>
                <match parameter="#1025" operator="EQUAL" reference="#1026" />
            </validity>
        </parameter>

        <!-- Expression with binding properties -->
        <parameter id="#1030" location="ROOT.EXPTEST.BASE" description="Base parameter" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="">
            <calib_poly a1="2" />
            <checks>
                <expected name="EXPCHK1" type="SIGNED_INTEGER">
                    <value>10</value>
                    <value>20</value>
                    <value>30</value>
                </expected>
            </checks>
        </parameter>
        <parameter id="#1031" location="ROOT.EXPTEST.EXP1" description="Parameter with expression 1" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="">
            <synthetic>
                <expression>SOURCEVAL == 30 ? 100 : -20</expression>
                <symbol name="SOURCEVAL" reference="#1030" binding="SOURCE_VALUE" />
            </synthetic>
        </parameter>
        <parameter id="#1032" location="ROOT.EXPTEST.EXP2" description="Parameter with expression 2" raw_type="SIGNED_INTEGER" eng_type="SIGNED_INTEGER" eng_unit="">
            <synthetic>
                <expression>EXPTEST_BASE * 2</expression>
                <symbol name="EXPTEST_BASE" reference="#1030" binding="ENG_VALUE" />
            </synthetic>
        </parameter>
        <parameter id="#1033" location="ROOT.EXPTEST.EXP3" description="Parameter with expression 3" raw_type="CHARACTER_STRING" eng_type="CHARACTER_STRING" eng_unit="">
            <synthetic>
                <expression>alarmState.ordinal() == 0 ? "IN ALARM" : "ALL OK" </expression>
                <symbol name="alarmState" reference="#1030" binding="ALARM_STATE" />
            </synthetic>
        </parameter>

        <!-- Log and XY calibrations -->
        <parameter id="#1041" location="ROOT.TEST.LOGPARAM" description="Parameter with log calibration" raw_type="REAL" eng_type="REAL">
            <calib_log a0="5" a1="2" />
        </parameter>
        <parameter id="#1042" location="ROOT.TEST.XYPARAM" description="Parameter with xy calibration" raw_type="REAL" eng_type="REAL">
            <calib_xy extrapolate="true">
                <point x="0" y="0" />
                <point x="10" y="10" />
                <point x="15" y="20" />
                <point x="17.5" y="30" />
                <point x="20" y="0" />
            </calib_xy>
        </parameter>

        <!-- External check and calibration -->
        <parameter id="#1051" location="ROOT.TEST.EXTPARAM" description="Parameter with external functions" raw_type="REAL" eng_type="REAL">
            <calib_external function="__identity">
                <property key="calib.key" value="test" />
            </calib_external>
            <checks>
                <external function="__nocheck" name="TESTEXTCHK" numViolations="2">
                    <property key="check.key" value="the_value" />
                </external>
            </checks>
        </parameter>

        <!-- Conditional calibrations -->
        <parameter id="#1065" location="ROOT.CTEST.BASE2" description="Conditional Base parameter 2" raw_type="ABSOLUTE_TIME"
                   eng_type="ABSOLUTE_TIME" eng_unit=""/>
        <parameter id="#1066" location="ROOT.CTEST.BASE3" description="Conditional Base parameter 3" raw_type="ABSOLUTE_TIME"
                   eng_type="ABSOLUTE_TIME" eng_unit=""/>
        <parameter id="#1061" location="ROOT.TEST.CONDPARAM" description="Parameter with conditional calibrations" raw_type="REAL" eng_type="REAL">
            <calib_log a0="5" a1="2">
                <applicability>
                    <match parameter="#1065" operator="LT" reference="#1066" />
                </applicability>
            </calib_log>
            <calib_xy extrapolate="true">
                <point x="0" y="0" />
                <point x="10" y="10" />
                <point x="15" y="20" />
                <point x="17.5" y="30" />
                <point x="20" y="0" />
            </calib_xy>
        </parameter>

    </parameters>
</ns1:processing>